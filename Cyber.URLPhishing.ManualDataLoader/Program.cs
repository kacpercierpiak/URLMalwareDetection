// See https://aka.ms/new-console-template for more information
using CsvHelper;
using CsvHelper.Configuration;
using Cyber.URLPhishing.Application.Repositories;
using Cyber.URLPhishing.Application.Services;
using Cyber.URLPhishing.Domain;
using Cyber.URLPhishing.Domain.Models.DataModels;
using Cyber.URLPhishing.Domain.Models.Response;
using Cyber.URLPhising.ML.Common;
using Cyber.URLPhising.ML.Predictors;
using Cyber.URLPhising.ML.Trainers;
using Microsoft.Extensions.Logging.Abstractions;
using System.Globalization;
using System.Text;

static void TrainEvaluatePredict(ITrainerBase trainer, UrlData newSample)
{
    Console.WriteLine("*******************************");
    Console.WriteLine($"{ trainer.Name }");
    Console.WriteLine("*******************************");

    trainer.Fit(".\\Data\\data.csv");


    var modelMetrics = trainer.Evaluate();

    Console.WriteLine($"Accuracy: {modelMetrics.Accuracy:0.##}{Environment.NewLine}" +
                      $"F1 Score: {modelMetrics.F1Score:#.##}{Environment.NewLine}" +
                      $"Positive Precision: {modelMetrics.PositivePrecision:#.##}{Environment.NewLine}" +
                      $"Negative Precision: {modelMetrics.NegativePrecision:0.##}{Environment.NewLine}" +
                      $"Positive Recall: {modelMetrics.PositiveRecall:#.##}{Environment.NewLine}" +
                      $"Negative Recall: {modelMetrics.NegativeRecall:#.##}{Environment.NewLine}" +
                      $"Area Under Precision Recall Curve: {modelMetrics.AreaUnderPrecisionRecallCurve:#.##}{Environment.NewLine}");

    trainer.Save();

    var predictor = new Predictor();
    var prediction = predictor.Predict(newSample);
    Console.WriteLine("------------------------------");
    Console.WriteLine($"Prediction: {prediction.PredictedLabel:#.##}");
    Console.WriteLine("------------------------------");
}

IURLRepository urlRepository = new URLRepository();
IURLService urlService = new URLService(NullLogger<URLService>.Instance, urlRepository);

var newSample = urlService.GetUrlInfo("google.com").


var trainers = new List<ITrainerBase>
            {
                new RandomForestTrainer(2, 5),
                new RandomForestTrainer(5, 10),
                new RandomForestTrainer(10, 20)
            };

trainers.ForEach(t => TrainEvaluatePredict(t, newSample));