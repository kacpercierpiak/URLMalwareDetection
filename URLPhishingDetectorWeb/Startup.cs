using Cyber.URLPhishing.Web.Data;
using Cyber.URLPhishing.Web.Services;
using Cyber.URLPhishing.Domain;
using Cyber.URLPhishing.Application.Repositories;
using Cyber.URLPhishing.Application.Services;
using Cyber.URLPhising.ML.Predictors;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Web;

namespace Cyber.URLPhishing.Web
{
    public class Startup
    {
        readonly string MyAllowSpecificOrigins = "_myAllowSpecificOrigins";
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddCors(options =>
            {
                options.AddPolicy(name: MyAllowSpecificOrigins,
                                  builder =>
                                  {
                                      builder.WithOrigins("https://url-phishing-detector.herokuapp.com",
                                                          "http://url-phishing-detector.herokuapp.com").AllowAnyMethod().AllowAnyHeader().AllowCredentials().SetIsOriginAllowed(origin => true);
                                  });
            });
           
            services.AddRazorPages();
            services.AddServerSideBlazor();
            services.AddSingleton<WeatherForecastService>();
            services.AddSingleton<Predictor>();
            services.AddTransient<IUrlValidationService, UrlValidationService>();
            services.AddTransient<IURLRepository, URLRepository>();
            services.AddTransient<IURLService, URLService>();

        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.

            }

            app.UseCors(MyAllowSpecificOrigins);
            app.UseStaticFiles();
            app.UseRouting();
            app.UseEndpoints(endpoints =>
            {
                endpoints.MapBlazorHub();
                endpoints.MapFallbackToPage("/_Host");
            });         
            


        }
    }
}
