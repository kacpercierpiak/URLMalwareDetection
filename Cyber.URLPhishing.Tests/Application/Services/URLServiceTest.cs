using Cyber.URLPhishing.Domain;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Xunit;
using Moq;
using static Cyber.URLPhishing.Application.Services.URLService;
using Cyber.URLPhishing.Application.Services;
using Microsoft.Extensions.Logging.Abstractions;

namespace Cyber.URLPhishing.Tests.Application.Services
{
    public class URLServiceTest
    {
        private readonly IURLService _urlService;
        public URLServiceTest()
        {
            var urlRepositoryMock = new Mock<IURLRepository>();
            urlRepositoryMock.Setup(x=>x.ExistsInBeningList(It.IsAny<string>())).ReturnsAsync(true);
            _urlService = new URLService(NullLogger<URLService>.Instance,urlRepositoryMock.Object);
        }

        [Theory]
        [InlineData("",0.0)]
        [InlineData("abcde", 0.0)]
        [InlineData("12345", 1.0)]
        [InlineData("12ab", 0.5)]
        [InlineData("1b2a", 0.5)]
        [InlineData("1b2acdef", 0.25)]
        public void DigitLetterRatioTest(string source, double expect)
        {
           var result = Parser.DigitLetterRatio(source);
           Assert.Equal(expect, result);
        }

        [Theory]
        [InlineData("", 0)]
        [InlineData("abcde", 0)]
        [InlineData("12345", 5)]
        [InlineData("12ab", 2)]
        [InlineData("1b2a", 2)]
        [InlineData("1b2acdef", 2)]
        public void DigitCountTest(string source, int expect)
        {
            var result = Parser.DigitCount(source);
            Assert.Equal(expect, result);
        }

        [Theory]
        [InlineData("192.168.0.1", true)]    
        [InlineData("test", false)]
        [InlineData("t.e.s.t", false)]
        public void ContainsIpTest(string source, bool expect)
        {
            var result = Parser.ContainsIp(source);
            Assert.Equal(expect, result);
        }

        [Theory]
        [InlineData("", 0.0)]
        [InlineData("abcde", 0.0)]
        [InlineData("ABCDE", 1.0)]
        [InlineData("ABab", 0.5)]
        [InlineData("AbBa", 0.5)]
        [InlineData("AbBacdef", 0.25)]
        public void UpperLowerRatioTest(string source, double expect)
        {
            var result = Parser.UpperLowerRatio(source);
            Assert.Equal(expect, result);
        }

        [Theory]
        [InlineData("", 0)]
        [InlineData("abcde", 0)]
        [InlineData("ABCDE", 0)]
        [InlineData("*&^%$", 5)]
        [InlineData("!Ab@Ba#", 3)]       
        public void SpecialCharsTest(string source, int expect)
        {
            var result = Parser.SpecialChars(source);
            Assert.Equal(expect, result);
        }

        [Theory]
        [InlineData("", 0)]
        [InlineData("abcde", 0)]
        [InlineData("ABCDE", 0)]
        [InlineData("*&^%$", 5)]
        [InlineData("!Ab@Ba#.'", 5)]
        public void NonAlphaNumericTest(string source, int expect)
        {
            var result = Parser.NonAlphaNumeric(source);
            Assert.Equal(expect, result);
        }

        [Theory]
        [MemberData(nameof(Data))]
        public void UppercaseSegmentsTest(string[] source, int expect)
        {
            var result = Parser.UppercaseSegments(source);
            Assert.Equal(expect, result);
        }

        public static IEnumerable<object[]> Data =>
        new List<object[]>
        {
            new object[] { new[]{ "abc" ,"wrt", "tt"}, 0 },
            new object[] { new[]{ "abc" ,"Wrt", "tt"}, 1 },
            new object[] { new[]{ "Abc" ,"Wrt", "Tt"}, 3 },
            new object[] { new string[]{}, 0 },
        };

        [Theory]
        [InlineData("abh//tesed//sdf//f", "//",3)]
        [InlineData("abcde", "ab",1)]
        [InlineData("a.b.c.d.e", ".",4)]
        public void CountSequenceTest(string source,string seq, int expect)
        {
            var result = Parser.CountSequence(source, seq);
            Assert.Equal(expect, result);
        }

        [Fact]
        public async Task GetUrlInfoTest()
        {
            var result = await _urlService.GetUrlInfo("http://www.Bot-any.a-wisc.edu.pl/cgi-bin2/Detail.cgi?spcode=dularu&amp;genus=2dulichium&amp;family=cyperaceae&amp;species=arundinaceum&amp;common=pond%20sedge%2c%20three-way%20sedge&amp;photo=&amp;thumbmaps=&amp;hand=");
            Assert.IsType<UrlInfo>(result);
        }


    }
}
